Module: Test (test)

Fooo..

Module: File System (fs)

File I/O is provided by simple wrappers around standard POSIX functions. To
use this module do `require('fs')`. All the methods have asynchronous and
synchronous forms.

The asynchronous form always take a completion callback as its last argument.
The arguments passed to the completion callback depend on the method, but the
first argument is always reserved for an exception. If the operation was
completed successfully, then the first argument will be `null` or `undefined`.

Here is an example of the asynchronous version:

    var fs = require('fs');
		
    fs.unlink('/tmp/hello', function (err) {
      if (err) throw err;
      console.log('successfully deleted /tmp/hello');
    });

Here is the synchronous version:

    var fs = require('fs');
		
    fs.unlinkSync('/tmp/hello')
    console.log('successfully deleted /tmp/hello');

With the asynchronous methods there is no guaranteed ordering. So the
following is prone to error:

    fs.rename('/tmp/hello', '/tmp/world', function (err) {
      if (err) throw err;
      console.log('renamed complete');
    });
		
    fs.stat('/tmp/world', function (err, stats) {
      if (err) throw err;
      console.log('stats: ' + JSON.stringify(stats));
    });

It could be that `fs.stat` is executed before `fs.rename`.
The correct way to do this is to chain the callbacks.

    fs.rename('/tmp/hello', '/tmp/world', function (err) {
      if (err) throw err;
      fs.stat('/tmp/world', function (err, stats) {
        if (err) throw err;
        console.log('stats: ' + JSON.stringify(stats));
      });
    });

In busy processes, the programmer is _strongly encouraged_ to use the
asynchronous versions of these calls. The synchronous versions will block
the entire process until they complete--halting all connections.

Method: fs.rename(path1, path2, [callback])
Param: path1 {String} The original file path
Param: path2 {String|Foo} The new file path
Param: callback {Function(err)} Optional [callback](../callbacks.html).

Asynchronous [rename(2)](http://kernel.org/doc/man-pages/online/pages/man2/rename.2.html).


Method: fs.renameSync(path1, path2)

Param: path1 {String} The original file path
Param: path1 {String} The original file path
Param: path2 {String} The new file path

Synchronous [rename(2)](http://kernel.org/doc/man-pages/online/pages/man2/rename.2.html).


Method: fs.truncate(fd, len, [callback])
Param: fd {fd} The file descriptor to operate on.
Param: len {Integer} The length to truncate the file to.
Param: callback {Function(err)} Optional [callback](../callbacks.html).

Asynchronous [ftruncate(2)](http://kernel.org/doc/man-pages/online/pages/man2/ftruncate.2.html).


Method: fs.truncateSync(fd, len)
Param: fd {fd} The file descriptor to operate on.
Param: len {Integer} The length to truncate the file to.

Synchronous [ftruncate(2)](http://kernel.org/doc/man-pages/online/pages/man2/ftruncate.2.html).


Method: fs.chmod(path, mode, [callback])
Param: path {String} The path to the file to chmod.
Param: mode {Integer} The permissions to use.
Param: callback {Function(err)} Optional [callback](../callbacks.html).

Asynchronous [chmod(2)](http://kernel.org/doc/man-pages/online/pages/man2/chmod.2.html).


Method: fs.chmodSync(path, mode)
Param: path {String} The path to the file to chmod.
Param: mode {Integer} The permissions to use.

Synchronous [chmod(2)](http://kernel.org/doc/man-pages/online/pages/man2/chmod.2.html).


Method: fs.stat(path, [callback])
Param: path {String} The path to the file to stat.
Param: callback {Function(err, stats)} Optional [callback](../callbacks.html).

Asynchronous [stat(2)](http://kernel.org/doc/man-pages/online/pages/man2/stat.2.html). The `stats` argument passed to the callback is a `fs.Stats` object. See the [fs.Stats](#fs.Stats) section below for more information. It looks like this:

    {
      dev: 2049,
      ino: 305352,
      mode: 16877,
      nlink: 12,
      uid: 1000,
      gid: 1000,
      rdev: 0,
      size: 4096,
      blksize: 4096,
      blocks: 8,
      atime: '2009-06-29T11:11:55Z',
      mtime: '2009-06-29T11:11:40Z',
      ctime: '2009-06-29T11:11:40Z'
    }


Method: fs.lstat(path, [callback])
Param: path {String} The path to the file to stat.
Param: callback {Function(err, stats)} Optional [callback](../callbacks.html).

Asynchronous [lstat(2)](http://kernel.org/doc/man-pages/online/pages/man2/lstat.2.html). The `stats` argument passed to the callback is a `fs.Stats` object. See the [fs.Stats](#fs.Stats) section below for more information. `fs.lstat` is identical to [`fs.stat`](#fs.stat), except that if
path is a symbolic link, then the link itself is operated on, not the file that it refers to.


Method: fs.fstat(fd, [callback])
Param: path {String} The path to the file to stat.
Param: callback {Function(err, stats)} Optional [callback](../callbacks.html).

Asynchronous [fstat(2)](http://kernel.org/doc/man-pages/online/pages/man2/fstat.2.html). The `stats` argument passed to the callback is a `fs.Stats` object. See the [fs.Stats](#fs.Stats) section below for more information.


Method: fs.statSync(path)
Param: path {String} The path to the file to stat.

Synchronous [stat(2)](http://kernel.org/doc/man-pages/online/pages/man2/stat.2.html). Returns an instance of `fs.Stats`.


Method: fs.lstatSync(path)
Param: path {String} The path to the file to stat.

Synchronous [lstat(2)](http://kernel.org/doc/man-pages/online/pages/man2/lstat.2.html). Returns an instance of `fs.Stats`.


Method: fs.fstatSync(fd)
Param: path {String} The path to the file to stat.

Synchronous [fstat(2)](http://kernel.org/doc/man-pages/online/pages/man2/fstat.2.html). Returns an instance of `fs.Stats`.


Method: fs.link(srcpath, dstpath, [callback])
Param: srcpath {String} The source file path.
Param: dstpath {String} The destination path.
Param: callback {Function(err)} Optional [callback](callbacks.html)

Asynchronous [link(2)](http://kernel.org/doc/man-pages/online/pages/man2/link.2.html).


Method: fs.linkSync(srcpath, dstpath)
Param: srcpath {String} The source file path.
Param: dstpath {String} The destination path.

Synchronous [link(2)](http://kernel.org/doc/man-pages/online/pages/man2/link.2.html).


Method: fs.symlink(srcpath, dstpath, [callback])
Param: srcpath {String} The source file path.
Param: dstpath {String} The destination path.
Param: callback {Function(err)} Optional [callback](callbacks.html)

Asynchronous [symlink(2)](http://kernel.org/doc/man-pages/online/pages/man2/symlink.2.html).


Method: fs.symlinkSync(srcpath, dstpath)
Param: srcpath {String} The source file path.
Param: dstpath {String} The destination path.

Synchronous [symlink(2)](http://kernel.org/doc/man-pages/online/pages/man2/symlink.2.html).


Method: fs.readlink(path, [callback])
Param: path {String} The path to operate on.
Param: callback {Function(err, resolvedPath)} Optional [callback](callbacks.html)

Asynchronous [readlink(2)](http://kernel.org/doc/man-pages/online/pages/man2/readlink.2.html). The callback argument `resolvedPath` is a string of the path which the link points to.


Method: fs.readlinkSync(path)
Param: path {String} The path to operate on.

Synchronous [readlink(2)](http://kernel.org/doc/man-pages/online/pages/man2/readlink.2.html). Returns the resolved path.


Method: fs.realpath(path, [callback])
Param: path {String} The path to operate on.
Param: callback {Function(err, resolvedPath)} Optional [callback](callbacks.html)

Asynchronous [realpath(2)](http://kernel.org/doc/man-pages/online/pages/man2/realpath.2.html). The callback argument `resolvedPath` is a string of the path which the `path` points to.


Method: fs.realpathSync(path)
Param: path {String} The path to operate on.

Synchronous [realpath(2)](http://kernel.org/doc/man-pages/online/pages/man2/realpath.2.html). Returns the resolved path.


Method: fs.unlink(path, [callback])
Param: path {String} The path to operate on.
Param: callback {Function(err)} Optional [callback](callbacks.html)

Asynchronous [unlink(2)](http://kernel.org/doc/man-pages/online/pages/man2/unlink.2.html).


Method: fs.unlinkSync(path)
Param: path {String} The path to operate on.

Synchronous [unlink(2)](http://kernel.org/doc/man-pages/online/pages/man2/unlink.2.html).


Method: fs.rmdir(path, [callback])
Param: path {String} The path to operate on.
Param: callback {Function(err)} Optional [callback](callbacks.html)

Asynchronous [rmdir(2)](http://kernel.org/doc/man-pages/online/pages/man2/rmdir.2.html).


Method: fs.rmdirSync(path)
Param: path {String} The path to operate on.

Synchronous [rmdir(2)](http://kernel.org/doc/man-pages/online/pages/man2/rmdir.2.html).


Method: fs.mkdir(path, mode, [callback])
Param: path {String} The path to operate on.
Param: mode {Integer} The permissions to set on the newly created directory.
Param: callback {Function(err)} Optional [callback](callbacks.html)

Asynchronous [mkdir(2)](http://kernel.org/doc/man-pages/online/pages/man2/mkdir.2.html).


Method: fs.mkdirSync(path, mode)
Param: path {String} The path to operate on.
Param: mode {Integer} The permissions to set on the newly created directory.

Synchronous [mkdir(2)](http://kernel.org/doc/man-pages/online/pages/man2/mkdir.2.html).


Method: fs.readdir(path, [callback])
Param: path {String} The path to operate on.
Param: callback {Function(err, files)} Optional [callback](callbacks.html)

Asynchronous [readdir(3)](http://kernel.org/doc/man-pages/online/pages/man3/readdir.3.html). Reads the contents of a directory.

The `files` argument of the callback is an array of filenames in the directory excluding `'.'` and `'..'`.


Method: fs.readdirSync(path)
Param: path {String} The path to operate on.

Synchronous [readdir(3)](http://kernel.org/doc/man-pages/online/pages/man3/readdir.3.html). Returns an array of filenames in the directory excluding `'.'` and `'..'`.


Method: fs.close(fd, [callback])
Param: fd {fd} The file descriptor to operate on.
Param: callback {Function(err)} Optional [callback](callbacks.html)

Asynchronous [close(2)](http://kernel.org/doc/man-pages/online/pages/man2/close.2.html).


Method: fs.closeSync(fd)
Param: fd {fd} The file descriptor to operate on.

Synchronous [close(2)](http://kernel.org/doc/man-pages/online/pages/man2/close.2.html).


Method: fs.open(path, flags, [mode], [callback])
Param: path {String} The path to operate on.
Param: flags {String|Integer} The flags to open (or create) the file with.
Param: mode {Integer} The permissions to use in case a new file is created.
Param: callback {Function(err, fd)} Optional [callback](callbacks.html)


Asynchronous [open(2)](http://kernel.org/doc/man-pages/online/pages/man2/open.2.html). The argument `flags` can be in the form of a string: 'r', 'r+', 'w', 'w+', 'a',
or 'a+'; or can be an integer value, for an example see the `stringToFlags` function inside the `fs` module.


Method: fs.openSync(path, flags, [mode])
Param: path {String} The path to operate on.
Param: flags {String|Integer} The flags to open (or create) the file with.
Param: mode {Integer} The permissions to use in case a new file is created.

Synchronous [open(2)](http://kernel.org/doc/man-pages/online/pages/man2/open.2.html). The argument `flags` can be in the form of a string: 'r', 'r+', 'w', 'w+', 'a',
or 'a+'; or can be an integer value, for an example see the `stringToFlags` function inside the `fs` module.


Method: fs.write(fd, buffer, offset, length, position, [callback])
Param: fd {fd} The file descriptor to operate on.
Param: buffer {Buffer} The buffer to write to the file.
Param: offset {Integer} The offset within the buffer to write.
Param: length {Integer} The length of data to write.
Param: position {Integer} The position from the beginning of the file to start writing from.
Param: callback {Function(err, written)} Optional [callback](callbacks.html)

Write `buffer` to the file specified by `fd`. The arguments `offset` and `length` determine the part of the buffer to be written.

If `position` is `null`, the data will be written at the current position. See [pwrite(2)](http://kernel.org/doc/man-pages/online/pages/man2/pwrite.2.html).

The callback argument `written` specifies how many _bytes_ were actually written.


Method: fs.writeSync(fd, buffer, offset, length, position)
Param: fd {fd} The file descriptor to operate on.
Param: buffer {Buffer} The buffer to write to the file.
Param: offset {Integer} The offset within the buffer to write.
Param: length {Integer} The length of data to write.
Param: position {Integer} The position from the beginning of the file to start writing from.

Synchronous version of buffer-based `fs.write()`. Returns the number of bytes
written.


Method: fs.read(fd, buffer, offset, length, position, [callback])
Param: fd {fd} The file descriptor to operate on.
Param: buffer {Buffer} The buffer to read data from the file into.
Param: offset {Integer} The offset within the buffer from where data will start to be read into.
Param: length {Integer} The number of bytes to read.
Param: position {Integer} The position from the beginning of the file to start reading from.
Param: callback {Function(err, bytesRead)} Optional [callback](callbacks.html)

Read data from the file specified by `fd`. If `position` is `null`, data will be read from the current file position.

The callback arguments `bytesRead` specifies the number of bytes successfully read.


Method: fs.readSync(fd, buffer, offset, length, position)
Param: fd {fd} The file descriptor to operate on.
Param: buffer {Buffer} The buffer to read data from the file into.
Param: offset {Integer} The offset within the buffer from where data will start to be read into.
Param: length {Integer} The number of bytes to read.
Param: position {Integer} The position from the beginning of the file to start reading from.

Synchronous version of `fs.read`. Returns the number of `bytesRead`.


Method: fs.readFile(path, [encoding], [callback])
Param: path {String} The path to operate on.
Param: encoding {String} The optional [Buffer encoding](buffers.html#encodings) to use.
Param: callback {Function(err, data)} Optional [callback](callbacks.html)

Asynchronously reads the entire contents of a file.

The callback argument `data` is the contents of the file. If no `encoding` is specified, then the raw buffer is returned.


Method: fs.readFileSync(filename, [encoding])
Param: path {String} The path to operate on.
Param: encoding {String} The optional [Buffer encoding](buffers.html#encodings) to use.

Synchronous version of `fs.readFile`.

Returns the contents of the `filename`. If no `encoding` is specified, then the raw buffer is returned.


Method: fs.writeFile(path, data, [encoding], [callback])
Param: path {String} The path to operate on.
Param: data {String|Buffer} The data to write to the file.
Param: encoding {String} The optional [Buffer encoding](buffers.html#encodings) to use.
Param: callback {Function(err)} Optional [callback](callbacks.html)

Asynchronously writes data to a file. If no `encoding` is specified, then the `utf8` encoding is used.

Example:

    fs.writeFile('message.txt', 'Hello Node', function (err) {
      if (err) throw err;
      console.log('It\'s saved!');
    });


Method: fs.writeFileSync(filename, data, [encoding])
Param: path {String} The path to operate on.
Param: data {String|Buffer} The data to write to the file.
Param: encoding {String} The optional [Buffer encoding](buffers.html#encodings) to use.

The synchronous version of `fs.writeFile`.


Method: fs.watchFile(path, [options], callback)
Param: path {String} The path to operate on.
Param: options {Object} The options for the watcher.
Param: callback {Function(curr, prev)} Optional [callback](callbacks.html)

Watch for changes on `path`. The `callback` will be called each time the file changes.

The `options` object is optional. If provided it should have two members `persistent` and `interval`. `persistent`'s value is a boolean and `interval` is a polling value in milliseconds.

Watch for changes on `filename`. The callback `listener` will be called each
time the file is accessed. If you want to be notified when the file was modified, not just accessed
you need to compare `curr.mtime` and `prev.mtime`.

The second argument is optional. The `options` if provided should be an object
containing two members a boolean, `persistent`, and `interval`, a polling
value in milliseconds. The default is `{ persistent: true, interval: 0 }`.

The `callback` gets two arguments the current and previous
[fs.Stats](#fs.Stats) objects:

    fs.watchFile(f, function (curr, prev) {
      console.log('the current mtime is: ' + curr.mtime);
      console.log('the previous mtime was: ' + prev.mtime);
    });


Method: fs.unwatchFile(path)
Param: path {String} The path to operate on.

Stop watching for changes on `path`.


Method: fs.createReadStream(path, [options])

Returns a new [fs.ReadStream](#fs.ReadStream).

`options` is an object with the following defaults:

    { flags: 'r',
      encoding: null,
      mode: 0666,
      bufferSize: 4096 }

`options` can include `start` and `end` values to read a range of bytes from
the file instead of the entire file.  Both `start` and `end` are inclusive and
start at 0.  When used, both the limits must be specified always.

An example to read the last 10 bytes of a file which is 100 bytes long:

    fs.createReadStream('sample.txt', {start: 90, end: 99});


Method: fs.createWriteStream(path, [options])

Returns a new [fs.WriteStream](#fs.WriteStream) object.

`options` is an object with the following defaults:

    { flags: 'w',
      encoding: null,
      mode: 0666 }

Class: fs.Stats

Objects returned from `fs.stat()` and `fs.lstat()` are of this type.

 - `stats.isFile()`
 - `stats.isDirectory()`
 - `stats.isBlockDevice()`
 - `stats.isCharacterDevice()`
 - `stats.isSymbolicLink()` (only valid with  `fs.lstat()`)
 - `stats.isFIFO()`
 - `stats.isSocket()`


Class: fs.ReadStream
Inherits: streams.Stream
Inherits: Events.EventEmitter

`ReadStream` is a `Readable Stream`.


Event: open
Param: fd {fd} The file descriptor that has opened.

Emitted when the file becomes open for reading. `fd` is the file descriptor used by the ReadStream.


Event: end

Emitted after all data has been read.


Event: close

Emitted when the file descriptor is closed.


Event: error
Param: err {Error} The error which occured.

Emitted if an error has occured while working with the ReadStream; This could, for example, be triggered by a file not being able to be opened for reading.


Event: data
Param: data {String|Buffer} The data that was just read.

Emitted as data is read from the file descriptor.


Class: fs.WriteStream
Inherits: streams.Stream

`WriteStream` is a `Writable Stream`.


Event: drain

Emitted after all queued operations on the WriteStream have completed.


Event: open
Param: fd {fd} The file descriptor that has opened.

Emitted when the file becomes open for writing. `fd` is the file descriptor used by the WriteStream.


Event: close

Emitted after all data has been written and the file descriptor closed.


Event: error
Param: err {Error} The error which occured.

Emitted if an error has occured while working with the WriteStream; This could, for example, be triggered by a file not being able to be opened for writing.

Module: Files System (fs)

File I/O is provided by simple wrappers around standard POSIX functions. To
use this module do `require('fs')`. All the methods have asynchronous and
synchronous forms.

The asynchronous form always take a completion callback as its last argument.
The arguments passed to the completion callback depend on the method, but the
first argument is always reserved for an exception. If the operation was
completed successfully, then the first argument will be `null` or `undefined`.

Here is an example of the asynchronous version:

    var fs = require('fs');
		
    fs.unlink('/tmp/hello', function (err) {
      if (err) throw err;
      console.log('successfully deleted /tmp/hello');
    });

Here is the synchronous version:

    var fs = require('fs');
		
    fs.unlinkSync('/tmp/hello')
    console.log('successfully deleted /tmp/hello');

With the asynchronous methods there is no guaranteed ordering. So the
following is prone to error:

    fs.rename('/tmp/hello', '/tmp/world', function (err) {
      if (err) throw err;
      console.log('renamed complete');
    });
		
    fs.stat('/tmp/world', function (err, stats) {
      if (err) throw err;
      console.log('stats: ' + JSON.stringify(stats));
    });

It could be that `fs.stat` is executed before `fs.rename`.
The correct way to do this is to chain the callbacks.

    fs.rename('/tmp/hello', '/tmp/world', function (err) {
      if (err) throw err;
      fs.stat('/tmp/world', function (err, stats) {
        if (err) throw err;
        console.log('stats: ' + JSON.stringify(stats));
      });
    });

In busy processes, the programmer is _strongly encouraged_ to use the
asynchronous versions of these calls. The synchronous versions will block
the entire process until they complete--halting all connections.

Method: fs.rename(path1, path2, [callback])
Param: path1 {String} The original file path
Param: path2 {String|Foo} The new file path
Param: callback {Function(err)} Optional [callback](../callbacks.html).

Asynchronous [rename(2)](http://kernel.org/doc/man-pages/online/pages/man2/rename.2.html).


Method: fs.renameSync(path1, path2)

Param: path1 {String} The original file path
Param: path1 {String} The original file path
Param: path2 {String} The new file path

Synchronous [rename(2)](http://kernel.org/doc/man-pages/online/pages/man2/rename.2.html).


Method: fs.truncate(fd, len, [callback])
Param: fd {fd} The file descriptor to operate on.
Param: len {Integer} The length to truncate the file to.
Param: callback {Function(err)} Optional [callback](../callbacks.html).

Asynchronous [ftruncate(2)](http://kernel.org/doc/man-pages/online/pages/man2/ftruncate.2.html).


Method: fs.truncateSync(fd, len)
Param: fd {fd} The file descriptor to operate on.
Param: len {Integer} The length to truncate the file to.

Synchronous [ftruncate(2)](http://kernel.org/doc/man-pages/online/pages/man2/ftruncate.2.html).


Method: fs.chmod(path, mode, [callback])
Param: path {String} The path to the file to chmod.
Param: mode {Integer} The permissions to use.
Param: callback {Function(err)} Optional [callback](../callbacks.html).

Asynchronous [chmod(2)](http://kernel.org/doc/man-pages/online/pages/man2/chmod.2.html).


Method: fs.chmodSync(path, mode)
Param: path {String} The path to the file to chmod.
Param: mode {Integer} The permissions to use.

Synchronous [chmod(2)](http://kernel.org/doc/man-pages/online/pages/man2/chmod.2.html).


Method: fs.stat(path, [callback])
Param: path {String} The path to the file to stat.
Param: callback {Function(err, stats)} Optional [callback](../callbacks.html).

Asynchronous [stat(2)](http://kernel.org/doc/man-pages/online/pages/man2/stat.2.html). The `stats` argument passed to the callback is a `fs.Stats` object. See the [fs.Stats](#fs.Stats) section below for more information. It looks like this:

    {
      dev: 2049,
      ino: 305352,
      mode: 16877,
      nlink: 12,
      uid: 1000,
      gid: 1000,
      rdev: 0,
      size: 4096,
      blksize: 4096,
      blocks: 8,
      atime: '2009-06-29T11:11:55Z',
      mtime: '2009-06-29T11:11:40Z',
      ctime: '2009-06-29T11:11:40Z'
    }


Method: fs.lstat(path, [callback])
Param: path {String} The path to the file to stat.
Param: callback {Function(err, stats)} Optional [callback](../callbacks.html).

Asynchronous [lstat(2)](http://kernel.org/doc/man-pages/online/pages/man2/lstat.2.html). The `stats` argument passed to the callback is a `fs.Stats` object. See the [fs.Stats](#fs.Stats) section below for more information. `fs.lstat` is identical to [`fs.stat`](#fs.stat), except that if
path is a symbolic link, then the link itself is operated on, not the file that it refers to.


Method: fs.fstat(fd, [callback])
Param: path {String} The path to the file to stat.
Param: callback {Function(err, stats)} Optional [callback](../callbacks.html).

Asynchronous [fstat(2)](http://kernel.org/doc/man-pages/online/pages/man2/fstat.2.html). The `stats` argument passed to the callback is a `fs.Stats` object. See the [fs.Stats](#fs.Stats) section below for more information.


Method: fs.statSync(path)
Param: path {String} The path to the file to stat.

Synchronous [stat(2)](http://kernel.org/doc/man-pages/online/pages/man2/stat.2.html). Returns an instance of `fs.Stats`.


Method: fs.lstatSync(path)
Param: path {String} The path to the file to stat.

Synchronous [lstat(2)](http://kernel.org/doc/man-pages/online/pages/man2/lstat.2.html). Returns an instance of `fs.Stats`.


Method: fs.fstatSync(fd)
Param: path {String} The path to the file to stat.

Synchronous [fstat(2)](http://kernel.org/doc/man-pages/online/pages/man2/fstat.2.html). Returns an instance of `fs.Stats`.


Method: fs.link(srcpath, dstpath, [callback])
Param: srcpath {String} The source file path.
Param: dstpath {String} The destination path.
Param: callback {Function(err)} Optional [callback](callbacks.html)

Asynchronous [link(2)](http://kernel.org/doc/man-pages/online/pages/man2/link.2.html).


Method: fs.linkSync(srcpath, dstpath)
Param: srcpath {String} The source file path.
Param: dstpath {String} The destination path.

Synchronous [link(2)](http://kernel.org/doc/man-pages/online/pages/man2/link.2.html).


Method: fs.symlink(srcpath, dstpath, [callback])
Param: srcpath {String} The source file path.
Param: dstpath {String} The destination path.
Param: callback {Function(err)} Optional [callback](callbacks.html)

Asynchronous [symlink(2)](http://kernel.org/doc/man-pages/online/pages/man2/symlink.2.html).


Method: fs.symlinkSync(srcpath, dstpath)
Param: srcpath {String} The source file path.
Param: dstpath {String} The destination path.

Synchronous [symlink(2)](http://kernel.org/doc/man-pages/online/pages/man2/symlink.2.html).


Method: fs.readlink(path, [callback])
Param: path {String} The path to operate on.
Param: callback {Function(err, resolvedPath)} Optional [callback](callbacks.html)

Asynchronous [readlink(2)](http://kernel.org/doc/man-pages/online/pages/man2/readlink.2.html). The callback argument `resolvedPath` is a string of the path which the link points to.


Method: fs.readlinkSync(path)
Param: path {String} The path to operate on.

Synchronous [readlink(2)](http://kernel.org/doc/man-pages/online/pages/man2/readlink.2.html). Returns the resolved path.


Method: fs.realpath(path, [callback])
Param: path {String} The path to operate on.
Param: callback {Function(err, resolvedPath)} Optional [callback](callbacks.html)

Asynchronous [realpath(2)](http://kernel.org/doc/man-pages/online/pages/man2/realpath.2.html). The callback argument `resolvedPath` is a string of the path which the `path` points to.


Method: fs.realpathSync(path)
Param: path {String} The path to operate on.

Synchronous [realpath(2)](http://kernel.org/doc/man-pages/online/pages/man2/realpath.2.html). Returns the resolved path.


Method: fs.unlink(path, [callback])
Param: path {String} The path to operate on.
Param: callback {Function(err)} Optional [callback](callbacks.html)

Asynchronous [unlink(2)](http://kernel.org/doc/man-pages/online/pages/man2/unlink.2.html).


Method: fs.unlinkSync(path)
Param: path {String} The path to operate on.

Synchronous [unlink(2)](http://kernel.org/doc/man-pages/online/pages/man2/unlink.2.html).


Method: fs.rmdir(path, [callback])
Param: path {String} The path to operate on.
Param: callback {Function(err)} Optional [callback](callbacks.html)

Asynchronous [rmdir(2)](http://kernel.org/doc/man-pages/online/pages/man2/rmdir.2.html).


Method: fs.rmdirSync(path)
Param: path {String} The path to operate on.

Synchronous [rmdir(2)](http://kernel.org/doc/man-pages/online/pages/man2/rmdir.2.html).


Method: fs.mkdir(path, mode, [callback])
Param: path {String} The path to operate on.
Param: mode {Integer} The permissions to set on the newly created directory.
Param: callback {Function(err)} Optional [callback](callbacks.html)

Asynchronous [mkdir(2)](http://kernel.org/doc/man-pages/online/pages/man2/mkdir.2.html).


Method: fs.mkdirSync(path, mode)
Param: path {String} The path to operate on.
Param: mode {Integer} The permissions to set on the newly created directory.

Synchronous [mkdir(2)](http://kernel.org/doc/man-pages/online/pages/man2/mkdir.2.html).


Method: fs.readdir(path, [callback])
Param: path {String} The path to operate on.
Param: callback {Function(err, files)} Optional [callback](callbacks.html)

Asynchronous [readdir(3)](http://kernel.org/doc/man-pages/online/pages/man3/readdir.3.html). Reads the contents of a directory.

The `files` argument of the callback is an array of filenames in the directory excluding `'.'` and `'..'`.


Method: fs.readdirSync(path)
Param: path {String} The path to operate on.

Synchronous [readdir(3)](http://kernel.org/doc/man-pages/online/pages/man3/readdir.3.html). Returns an array of filenames in the directory excluding `'.'` and `'..'`.


Method: fs.close(fd, [callback])
Param: fd {fd} The file descriptor to operate on.
Param: callback {Function(err)} Optional [callback](callbacks.html)

Asynchronous [close(2)](http://kernel.org/doc/man-pages/online/pages/man2/close.2.html).


Method: fs.closeSync(fd)
Param: fd {fd} The file descriptor to operate on.

Synchronous [close(2)](http://kernel.org/doc/man-pages/online/pages/man2/close.2.html).


Method: fs.open(path, flags, [mode], [callback])
Param: path {String} The path to operate on.
Param: flags {String|Integer} The flags to open (or create) the file with.
Param: mode {Integer} The permissions to use in case a new file is created.
Param: callback {Function(err, fd)} Optional [callback](callbacks.html)


Asynchronous [open(2)](http://kernel.org/doc/man-pages/online/pages/man2/open.2.html). The argument `flags` can be in the form of a string: 'r', 'r+', 'w', 'w+', 'a',
or 'a+'; or can be an integer value, for an example see the `stringToFlags` function inside the `fs` module.


Method: fs.openSync(path, flags, [mode])
Param: path {String} The path to operate on.
Param: flags {String|Integer} The flags to open (or create) the file with.
Param: mode {Integer} The permissions to use in case a new file is created.

Synchronous [open(2)](http://kernel.org/doc/man-pages/online/pages/man2/open.2.html). The argument `flags` can be in the form of a string: 'r', 'r+', 'w', 'w+', 'a',
or 'a+'; or can be an integer value, for an example see the `stringToFlags` function inside the `fs` module.


Method: fs.write(fd, buffer, offset, length, position, [callback])
Param: fd {fd} The file descriptor to operate on.
Param: buffer {Buffer} The buffer to write to the file.
Param: offset {Integer} The offset within the buffer to write.
Param: length {Integer} The length of data to write.
Param: position {Integer} The position from the beginning of the file to start writing from.
Param: callback {Function(err, written)} Optional [callback](callbacks.html)

Write `buffer` to the file specified by `fd`. The arguments `offset` and `length` determine the part of the buffer to be written.

If `position` is `null`, the data will be written at the current position. See [pwrite(2)](http://kernel.org/doc/man-pages/online/pages/man2/pwrite.2.html).

The callback argument `written` specifies how many _bytes_ were actually written.


Method: fs.writeSync(fd, buffer, offset, length, position)
Param: fd {fd} The file descriptor to operate on.
Param: buffer {Buffer} The buffer to write to the file.
Param: offset {Integer} The offset within the buffer to write.
Param: length {Integer} The length of data to write.
Param: position {Integer} The position from the beginning of the file to start writing from.

Synchronous version of buffer-based `fs.write()`. Returns the number of bytes
written.


Method: fs.read(fd, buffer, offset, length, position, [callback])
Param: fd {fd} The file descriptor to operate on.
Param: buffer {Buffer} The buffer to read data from the file into.
Param: offset {Integer} The offset within the buffer from where data will start to be read into.
Param: length {Integer} The number of bytes to read.
Param: position {Integer} The position from the beginning of the file to start reading from.
Param: callback {Function(err, bytesRead)} Optional [callback](callbacks.html)

Read data from the file specified by `fd`. If `position` is `null`, data will be read from the current file position.

The callback arguments `bytesRead` specifies the number of bytes successfully read.


Method: fs.readSync(fd, buffer, offset, length, position)
Param: fd {fd} The file descriptor to operate on.
Param: buffer {Buffer} The buffer to read data from the file into.
Param: offset {Integer} The offset within the buffer from where data will start to be read into.
Param: length {Integer} The number of bytes to read.
Param: position {Integer} The position from the beginning of the file to start reading from.

Synchronous version of `fs.read`. Returns the number of `bytesRead`.


Method: fs.readFile(path, [encoding], [callback])
Param: path {String} The path to operate on.
Param: encoding {String} The optional [Buffer encoding](buffers.html#encodings) to use.
Param: callback {Function(err, data)} Optional [callback](callbacks.html)

Asynchronously reads the entire contents of a file.

The callback argument `data` is the contents of the file. If no `encoding` is specified, then the raw buffer is returned.


Method: fs.readFileSync(filename, [encoding])
Param: path {String} The path to operate on.
Param: encoding {String} The optional [Buffer encoding](buffers.html#encodings) to use.

Synchronous version of `fs.readFile`.

Returns the contents of the `filename`. If no `encoding` is specified, then the raw buffer is returned.


Method: fs.writeFile(path, data, [encoding], [callback])
Param: path {String} The path to operate on.
Param: data {String|Buffer} The data to write to the file.
Param: encoding {String} The optional [Buffer encoding](buffers.html#encodings) to use.
Param: callback {Function(err)} Optional [callback](callbacks.html)

Asynchronously writes data to a file. If no `encoding` is specified, then the `utf8` encoding is used.

Example:

    fs.writeFile('message.txt', 'Hello Node', function (err) {
      if (err) throw err;
      console.log('It\'s saved!');
    });


Method: fs.writeFileSync(filename, data, [encoding])
Param: path {String} The path to operate on.
Param: data {String|Buffer} The data to write to the file.
Param: encoding {String} The optional [Buffer encoding](buffers.html#encodings) to use.

The synchronous version of `fs.writeFile`.


Method: fs.watchFile(path, [options], callback)
Param: path {String} The path to operate on.
Param: options {Object} The options for the watcher.
Param: callback {Function(curr, prev)} Optional [callback](callbacks.html)

Watch for changes on `path`. The `callback` will be called each time the file changes.

The `options` object is optional. If provided it should have two members `persistent` and `interval`. `persistent`'s value is a boolean and `interval` is a polling value in milliseconds.

Watch for changes on `filename`. The callback `listener` will be called each
time the file is accessed. If you want to be notified when the file was modified, not just accessed
you need to compare `curr.mtime` and `prev.mtime`.

The second argument is optional. The `options` if provided should be an object
containing two members a boolean, `persistent`, and `interval`, a polling
value in milliseconds. The default is `{ persistent: true, interval: 0 }`.

The `callback` gets two arguments the current and previous
[fs.Stats](#fs.Stats) objects:

    fs.watchFile(f, function (curr, prev) {
      console.log('the current mtime is: ' + curr.mtime);
      console.log('the previous mtime was: ' + prev.mtime);
    });


Method: fs.unwatchFile(path)
Param: path {String} The path to operate on.

Stop watching for changes on `path`.


Method: fs.createReadStream(path, [options])

Returns a new [fs.ReadStream](#fs.ReadStream).

`options` is an object with the following defaults:

    { flags: 'r',
      encoding: null,
      mode: 0666,
      bufferSize: 4096 }

`options` can include `start` and `end` values to read a range of bytes from
the file instead of the entire file.  Both `start` and `end` are inclusive and
start at 0.  When used, both the limits must be specified always.

An example to read the last 10 bytes of a file which is 100 bytes long:

    fs.createReadStream('sample.txt', {start: 90, end: 99});


Method: fs.createWriteStream(path, [options])

Returns a new [fs.WriteStream](#fs.WriteStream) object.

`options` is an object with the following defaults:

    { flags: 'w',
      encoding: null,
      mode: 0666 }

Class: fs.Stats

Objects returned from `fs.stat()` and `fs.lstat()` are of this type.

 - `stats.isFile()`
 - `stats.isDirectory()`
 - `stats.isBlockDevice()`
 - `stats.isCharacterDevice()`
 - `stats.isSymbolicLink()` (only valid with  `fs.lstat()`)
 - `stats.isFIFO()`
 - `stats.isSocket()`


Class: fs.ReadStream
Inherits: streams.Stream
Inherits: Events.EventEmitter

`ReadStream` is a `Readable Stream`.


Event: open
Param: fd {fd} The file descriptor that has opened.

Emitted when the file becomes open for reading. `fd` is the file descriptor used by the ReadStream.


Event: end

Emitted after all data has been read.


Event: close

Emitted when the file descriptor is closed.


Event: error
Param: err {Error} The error which occured.

Emitted if an error has occured while working with the ReadStream; This could, for example, be triggered by a file not being able to be opened for reading.


Event: data
Param: data {String|Buffer} The data that was just read.

Emitted as data is read from the file descriptor.


Class: fs.WriteStream
Inherits: streams.Stream

`WriteStream` is a `Writable Stream`.


Event: drain

Emitted after all queued operations on the WriteStream have completed.


Event: open
Param: fd {fd} The file descriptor that has opened.

Emitted when the file becomes open for writing. `fd` is the file descriptor used by the WriteStream.


Event: close

Emitted after all data has been written and the file descriptor closed.


Event: error
Param: err {Error} The error which occured.

Emitted if an error has occured while working with the WriteStream; This could, for example, be triggered by a file not being able to be opened for writing.
